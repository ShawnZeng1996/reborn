/*! For license information please see rb.bundle.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./main.js":()=>{eval("(function ($) {\n    const App = {\n        // 页面初始化浅色&深色模式\n        pageInit: function () {\n            // 检查并获取 sessionStorage 项\n            function getSessionStorageItem(key) {\n                if (typeof sessionStorage !== 'undefined') {\n                    return sessionStorage.getItem(key);\n                }\n                return null;\n            }\n            const themeMode = getSessionStorageItem('theme-mode');\n            if (themeMode) {\n                // console.log('Current theme mode is:', themeMode);\n                // 根据 themeMode 的值进行操作\n                if (themeMode === 'light') {\n                    // 设置为 light 主题\n                    $('html').attr('theme-mode', 'light');\n                    $('.rb-tabs__block').css('left', '2px');\n                } else if (themeMode === 'dark') {\n                    // 设置为 dark 主题\n                    $('html').attr('theme-mode', 'dark');\n                    $('.rb-tabs__block').css('left', '30px');\n                }\n            } else {\n                const darkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)');\n                if (darkMode && darkMode.matches) {\n                    $('.rb-tabs__block').css('left', '30px');\n                }\n                // console.log('No theme mode found in sessionStorage.');\n            }\n        },\n        // 浅色&深色模式切换\n        themeModeToggle: function () {\n            const $themeButtons = $('.rb-item'); // 获取所有带有 .rb-item 类的元素\n            const $realButton = $('.rb-tabs__block'); // 遮罩\n            const setTheme = (theme, position) => {\n                if (!document.startViewTransition) {\n                    $('html').attr('theme-mode', theme);\n                    $realButton.css('left', position);\n                } else {\n                    document.startViewTransition(() => {\n                        $('html').attr('theme-mode', theme);\n                        $realButton.css('left', position);\n                    });\n                }\n                sessionStorage.setItem(\"theme-mode\", theme);\n            };\n            // 遍历每个按钮，添加点击事件监听器\n            $themeButtons.on('click', function() {\n                const theme = $(this).data('theme');\n                if (theme === 'light') {\n                    setTheme('light', '2px');\n                } else {\n                    setTheme('dark', '30px');\n                }\n                // 更新激活状态\n                $themeButtons.removeClass('active');\n                $(this).addClass('active');\n            });\n        },\n        pageLoadMore: function () {\n            $('.pagination .next').click(function (e){\n                e.preventDefault();\n                let $this = $(this);\n                $this.addClass('loading').text('努力加载中');\n                let href = $this.attr('href');\n                if (href !== undefined) {\n                    $.ajax({\n                        url: href,\n                        type: 'get',\n                        error: function (request) {\n                            alert('加载失败！');\n                        },\n                        success: function (data) {\n                            $this.removeClass('loading').text('点击查看更多');\n                            let $res = $(data).find('.post-type');\n                            $('.pagination').before($res.fadeIn(500));\n                            let newhref = $(data).find('.next').attr('href');\n                            if (newhref !== undefined) {\n                                $this.attr('href', newhref);\n                            } else {\n                                $this.remove();\n                            }\n                        }\n                    });\n                }\n            });\n        },\n        // 点击展开点赞/评论\n        postMetaExpand: function () {\n            $(document).on('click', '.post-more', function () {\n                const $postAction = $(this).siblings('.post-action-container').find('.post-action');\n                const cid = $postAction.data('cid');\n                const likeArray = JSON.parse(localStorage.getItem('postLike') || '[]');\n                //console.log(\"cid: \"+cid);\n                //console.log(likeArray);\n                if (likeArray.includes(cid)) {\n                    $postAction.find('.like').hide();\n                    $postAction.find('.cancel').show();\n                } else {\n                    $postAction.find('.cancel').hide();\n                    $postAction.find('.like').show();\n                }\n                if ($postAction.hasClass('show')) {\n                    $postAction.removeClass('show');\n                } else {\n                    $('.post-action').removeClass('show'); // 关闭所有其他打开的post-action\n                    $postAction.addClass('show');\n                }\n            });\n            $(document).on('click', function (e) {\n                if (!$(e.target).closest('.post-meta-2').length) {\n                    $('.post-action').removeClass('show');\n                }\n            });\n        },\n        postLike: function () {\n            // 获取并处理 Cookies\n            const cleanedCookiesObject = {};\n            $.each(document.cookie.split('; '), function(_, cookie) {\n                const [key, value] = cookie.split('=');\n                // 仅处理包含特定前缀的 cookie\n                if (\n                    key.includes('_typecho_remember_remember') ||\n                    key.includes('_typecho_remember_author') ||\n                    key.includes('_typecho_remember_mail') ||\n                    key.includes('_typecho_remember_url')\n                ) {\n                    // 去掉前缀并解码值\n                    const cookieKey = key.includes('__') ? key.split('__')[1] : key;\n                    cleanedCookiesObject[cookieKey] = decodeURIComponent(value);\n                }\n            });\n            $(document).on('click', '.post-like', function (e) {\n                e.preventDefault();\n                const $this = $(this);\n                const cid = $this.data('cid');\n                const location = $this.data('location');\n                let likeArray = JSON.parse(localStorage.getItem('postLike') || '[]');\n                let isLiked = likeArray.includes(cid);\n                let $postLikeArea = $('#post-like-area-' + cid);\n                // 禁用按钮，防止重复点击\n                $this.prop('disabled', true);\n                // 发送 AJAX 请求\n                $.ajax({\n                    url: reborn.apiUrl,\n                    type: 'POST',\n                    dataType: 'json',\n                    data: {\n                        cid: cid,\n                        routeType: 'postLike',\n                        action: isLiked ? 'dislike' : 'like',\n                        location: location,\n                        cookieObject: JSON.stringify(cleanedCookiesObject)\n                    },\n                    success: function(response) {\n                        if (response.code === 1) {\n                            // 更新本地存储\n                            if (isLiked) {\n                                // 取消点赞\n                                likeArray = likeArray.filter(element => element !== cid);\n                            } else {\n                                // 添加点赞\n                                likeArray.push(cid);\n                            }\n                            localStorage.setItem('postLike', JSON.stringify(likeArray));\n                            // 切换点赞/取消点赞的显示\n                            $this.find('.like').toggle();\n                            $this.find('.cancel').toggle();\n                            // 更新点赞数显示\n                            let likesTotalNum = response.likesTotalNum;\n                            let likesDisplay = response.likesListHtml;\n                            if (likesTotalNum === 0) {\n                                $postLikeArea.addClass('hidden');\n                            } else {\n                                $postLikeArea.removeClass('hidden');\n                                $postLikeArea.html(likesDisplay);\n                            }\n                        }\n                    },\n                    error: function(xhr, status, error) {\n                        console.error('AJAX Error: ', status, error);\n                    },\n                    complete: function() {\n                        // 恢复按钮状态\n                        $this.prop('disabled', false);\n                    }\n                });\n            });\n        },\n        commentLike: function () {\n            let likeArray = JSON.parse(localStorage.getItem('commentLike') || '[]');\n            $('.comment-like').each(function () {\n                const $this = $(this);\n                const coid = $this.data('coid');\n                if (likeArray.includes(coid)) {\n                    $this.find('.reborn').attr('class', 'reborn rb-like');\n                }\n            });\n            $(document).on('click', '.comment-like', function (e) {\n                e.preventDefault();\n                const $this = $(this);\n                const coid = $this.data('coid');\n                let isLiked = likeArray.includes(coid);\n                $.ajax({\n                    url: reborn.apiUrl,\n                    type: 'POST',\n                    dataType: 'json',\n                    data: {\n                        coid: coid,\n                        routeType: 'commentLike',\n                        action: isLiked ? 'dislike' : 'like',\n                    },\n                    success:function (response) {\n                        if (response.code === 1) {\n                            let likesTotalNum = response.likesTotalNum;\n                            // 更新本地存储\n                            if (isLiked) {\n                                // 取消点赞\n                                likeArray = likeArray.filter(element => element !== coid);\n                                $this.html(likesTotalNum+'&nbsp;<i class=\"reborn rb-like-o\"></i>');\n                            } else {\n                                // 添加点赞\n                                likeArray.push(coid);\n                                $this.html(likesTotalNum+'&nbsp;<i class=\"reborn rb-like\"></i>');\n                            }\n                            localStorage.setItem('commentLike', JSON.stringify(likeArray));\n                        }\n                    },\n                    error: function(xhr, status, error) {\n                        console.error('AJAX Error: ', status, error);\n                    }\n                })\n            });\n        },\n        postComment: function () {\n            // 评论框显示逻辑\n            $(document).on('click', '.post-comment', function () {\n                $('.post-action').removeClass('show');\n                let cid = $(this).data('cid');\n                let coid = $(this).data('coid');\n                let name = $(this).data('name');\n                let location = $(this).data('location');\n                // 显示评论区域\n                let $commentArea = $('.post-comment-area-' + cid);\n                $commentArea.removeClass('hidden');\n                // 隐藏所有的评论表单\n                $('.comment-form').hide();\n                // 获取当前的评论表单\n                let $commentForm = $commentArea.find('.comment-form');\n                let $commentTextArea = $commentArea.find('.comment-textarea');\n                if (coid === undefined) {\n                    $commentForm.find('#comment-parent').val(0);\n                    $commentTextArea.attr('placeholder', '回复内容');\n                    if (location === 'index') {\n                        $commentArea.prepend($commentForm);\n                    } else if (location === 'shuoshuo' || location === 'post') {\n                        $commentArea.find('.respond-form').prepend($commentForm);\n                    }\n                } else {\n                    // 设置数据属性和占位符\n                    $commentForm.find('#comment-parent').val(coid);\n                    $commentTextArea.attr('placeholder', '回复@' + name);\n                    // 将评论表单移动到指定位置\n                    $commentForm.insertAfter('#comment-' + coid + '>.comment-item-header');\n                }\n                $commentForm.show().addClass('focus');\n                $commentTextArea.focus();\n            });\n            $(document).on('click', '.comment-form', function () {\n                $(this).addClass('focus');\n            });\n            $(document).on('click', function (e) {\n                if (!$(e.target).closest('.comment-form').length && !$(e.target).hasClass('post-comment')) {\n                    $('.comment-form').removeClass('focus');\n                }\n            });\n            $(document).on('click', '.comment-cancel', function () {\n                $('.none-comment').show();\n                let cid = $(this).data('cid');\n                $('.comment-form').removeClass('focus').hide();\n                if ($('#post-comment-area-'+cid).find('.comment-item').length === 0) {\n                    $('#post-comment-area-'+cid).addClass('hidden');\n                }\n            });\n        },\n        emojiEvent: function () {\n            const emojiBasePath = reborn.themeUrl + 'assets/emoji/';\n            let emojiData = {};\n            // 加载表情包数据\n            $.getJSON(reborn.themeUrl + 'assets/emoji/emojiData.json', function(data) {\n                emojiData = data;\n                //preloadEmojis();\n                loadEmojis('wechat');\n            });\n            // 预加载所有表情图像\n            function preloadEmojis() {\n                Object.keys(emojiData).forEach(category => {\n                    emojiData[category].forEach(emoji => {\n                        const img = new Image();\n                        img.src = emojiBasePath + category + '/' + emoji;\n                    });\n                });\n            }\n            // 加载表情页\n            function loadEmojis(category) {\n                const emojiList = $('.emoji-list');\n                emojiList.empty(); // 清空现有的表情列表\n                if (!emojiData[category]) {\n                    console.error('No emojis found for category:', category);\n                    return;\n                }\n                emojiData[category].forEach(function(emoji) {\n                    const img = $('<img>').attr('src', reborn.themeUrl + emoji.icon)\n                        .attr({'alt': emoji.data, 'title': emoji.data })\n                        .addClass('rb-emoji-item')\n                        .click(function() {\n                            let cid = $(this).parents('.comment-form').data(\"cid\");\n                            let area = '.post-comment-area-'+cid+' .comment-textarea';\n                            // 表情点击事件\n                            const emojiCode = emoji.data;\n                            insertAtCaret(area, emojiCode);\n                            $('.emoji-container').toggle();\n                        });\n                    emojiList.append(img);\n                });\n            }\n            // 插入表情到文本框中\n            function insertAtCaret(area, text) {\n                const txtArea = $(area).get(0);\n                if (!txtArea) {\n                    return;\n                }\n                const scrollPos = txtArea.scrollTop;\n                let strPos = txtArea.selectionStart;\n                const front = (txtArea.value).substring(0, strPos);\n                const back = (txtArea.value).substring(strPos, txtArea.value.length);\n                txtArea.value = front + text + back;\n                strPos = strPos + text.length;\n                txtArea.selectionStart = strPos;\n                txtArea.selectionEnd = strPos;\n                txtArea.focus();\n                txtArea.scrollTop = scrollPos;\n            }\n            // 切换类别\n            $(document).on('click', '.emoji-category', function () {\n                $('.emoji-category').removeClass('active');\n                $(this).addClass('active');\n                const category = $(this).data('category');\n                loadEmojis(category);\n            });\n            // 显示/隐藏表情选择器\n            $(document).on('click', '#toggle-emoji-picker', function () {\n                $('.emoji-container').toggle();\n                loadEmojis('wechat');\n            });\n            $(document).mouseup(function(e) {\n                if (!$(e.target).hasClass('comment-emoji')) {\n                    // 如果点击的不是.reborn.rb-emoji及其子元素\n                    $(\"#emoji-container\").each(function() {\n                        const container = $(this);\n                        // 还要确保点击的不是container内部的元素\n                        if (!container.is(e.target) && container.has(e.target).length === 0) {\n                            container.hide();\n                        }\n                    });\n                }\n            });\n        },\n        codeCopy: function () {\n            $('pre').each(function(index) {\n                const $pre = $(this);\n                const $code = $pre.find('code').first(); // 查找第一个 code 标签\n                if ($code.length > 0) {\n                    const uniqueId = 'rb-code-' + index;\n                    $code.before('<span class=\"reborn rb-down code-hide\"></span><span class=\"reborn rb-copy code-copy\" data-clipboard-action=\"copy\" data-clipboard-target=\"#' + uniqueId + '\"></span>'); // 在 code 标签前添加按钮\n                    $code.attr('id', uniqueId);\n                    var clipboard = new ClipboardJS('.code-copy');\n                    clipboard.on('success', function(e) {\n                        //console.log(e);\n                    });\n                    clipboard.on('error', function(e) {\n                        //console.log(e);\n                    });\n                }\n            });\n            // 点击 code-hide 标签时隐藏/显示对应的 code 标签，并切换 rb-down 和 rb-up 类\n            $(document).on('click', '.code-hide', function() {\n                const $this = $(this);\n                const $code = $this.nextAll('code').first(); // 获取相邻的 code 标签\n                if ($code.css('max-height') === '35px') {\n                    $code.css('max-height', 'none');\n                    $code.css('padding-bottom', '15px');\n                } else {\n                    $code.css('max-height', '35px');\n                    $code.css('padding-bottom', '5px');\n                }\n                $this.toggleClass('rb-down rb-up'); // 切换 rb-down 和 rb-up 类\n            });\n        },\n        scrollEvent: function () {\n            var $stickyModule = $('#sticky');\n            var stickyModuleOffset = $stickyModule.offset().top;\n            var isSticky = false;\n            function checkSticky() {\n                var moduleRect = $stickyModule[0].getBoundingClientRect();\n                var moduleWidth = moduleRect.width;\n                if ($(window).scrollTop() > stickyModuleOffset) {\n                    if (!isSticky) {\n                        $stickyModule.css('width', moduleWidth).addClass('sticky');\n                        isSticky = true;\n                    }\n                } else {\n                    if (isSticky) {\n                        $stickyModule.css('width', '').removeClass('sticky');\n                        isSticky = false;\n                    }\n                }\n            }\n            $(window).on('scroll', function() {\n                requestAnimationFrame(checkSticky);\n            });\n            // 监听滚动事件，更新目录项样式\n            var $tocLinks = $('.toc-link');\n            var $headers = $('#post-content h1, #post-content h2, #post-content h3, #post-content h4, #post-content h5');\n            function scrollCheck() {\n                var scrollTop = $(window).scrollTop();\n                var activeIndex = -1;\n                $headers.each(function(index) {\n                    if ($(this).offset().top - scrollTop < 40) {\n                        activeIndex = index;\n                    }\n                });\n                $tocLinks.removeClass('active');\n                if (activeIndex >= 0) {\n                    $tocLinks.eq(activeIndex).addClass('active');\n                } else {\n                    // 当没有找到高亮的标题时，默认高亮第一个目录项\n                    $tocLinks.eq(0).addClass('active');\n                }\n            }\n            scrollCheck();\n            $(window).on('scroll', function() {\n                scrollCheck();\n            });\n        }\n    };\n\n    $(document).ready(function () {\n        App.pageInit();\n        App.themeModeToggle();\n        App.pageLoadMore();\n        App.postMetaExpand();\n        App.postLike();\n        App.commentLike();\n        App.postComment();\n        App.emojiEvent();\n        hljs.highlightAll();\n        hljs.initLineNumbersOnLoad();\n        App.codeCopy();\n        App.scrollEvent()\n    });\n})(jQuery);\n\n//# sourceURL=webpack://reborn/./main.js?")}},__webpack_exports__={};__webpack_modules__["./main.js"]()})();